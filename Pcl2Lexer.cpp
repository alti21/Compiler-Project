
#include "wci/intermediate/TypeSpec.h"
using namespace wci::intermediate;


// Generated from Pcl2.g4 by ANTLR 4.7.1


#include "Pcl2Lexer.h"


using namespace antlr4;


Pcl2Lexer::Pcl2Lexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

Pcl2Lexer::~Pcl2Lexer() {
  delete _interpreter;
}

std::string Pcl2Lexer::getGrammarFileName() const {
  return "Pcl2.g4";
}

const std::vector<std::string>& Pcl2Lexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& Pcl2Lexer::getChannelNames() const {
  return _channelNames;
}

const std::vector<std::string>& Pcl2Lexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& Pcl2Lexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& Pcl2Lexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> Pcl2Lexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& Pcl2Lexer::getATN() const {
  return _atn;
}


void Pcl2Lexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 25: LPARENAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 26: RPARENAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 27: LBRACKAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;
    case 28: RBRACKAction(dynamic_cast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

bool Pcl2Lexer::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 22: return NEWLINESempred(dynamic_cast<antlr4::RuleContext *>(context), predicateIndex);
    case 24: return IGNORE_NEWLINESempred(dynamic_cast<antlr4::RuleContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

void Pcl2Lexer::LPARENAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: nesting++; break;

  default:
    break;
  }
}

void Pcl2Lexer::RPARENAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: nesting--; break;

  default:
    break;
  }
}

void Pcl2Lexer::LBRACKAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2: nesting++; break;

  default:
    break;
  }
}

void Pcl2Lexer::RBRACKAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3: nesting--; break;

  default:
    break;
  }
}


bool Pcl2Lexer::NEWLINESempred(antlr4::RuleContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return nesting==0;

  default:
    break;
  }
  return true;
}

bool Pcl2Lexer::IGNORE_NEWLINESempred(antlr4::RuleContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return nesting>0;

  default:
    break;
  }
  return true;
}


// Static vars and initialization.
std::vector<dfa::DFA> Pcl2Lexer::_decisionToDFA;
atn::PredictionContextCache Pcl2Lexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN Pcl2Lexer::_atn;
std::vector<uint16_t> Pcl2Lexer::_serializedATN;

std::vector<std::string> Pcl2Lexer::_ruleNames = {
  u8"T__0", u8"T__1", u8"T__2", u8"T__3", u8"T__4", u8"EQUALITY", u8"MUL_DIV_OP", 
  u8"ADD_SUB_OP", u8"MUL_OP", u8"DIV_OP", u8"ADD_OP", u8"SUB_OP", u8"INT", 
  u8"CHAR", u8"IF", u8"WHILE", u8"PRINT", u8"INSERTION", u8"STRING", u8"ID", 
  u8"COMMENT", u8"WS", u8"NEWLINE", u8"LINE_ESCAPE", u8"IGNORE_NEWLINE", 
  u8"LPAREN", u8"RPAREN", u8"LBRACK", u8"RBRACK"
};

std::vector<std::string> Pcl2Lexer::_channelNames = {
  "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
};

std::vector<std::string> Pcl2Lexer::_modeNames = {
  u8"DEFAULT_MODE"
};

std::vector<std::string> Pcl2Lexer::_literalNames = {
  "", u8"'return'", u8"':'", u8"'{'", u8"'}'", u8"'='", u8"'==='", "", "", 
  u8"'*'", u8"'/'", u8"'+'", u8"'-'", "", "", u8"'if'", u8"'while'", u8"'print'", 
  u8"'<<'", "", "", "", "", "", "", "", u8"'('", u8"')'", u8"'['", u8"']'"
};

std::vector<std::string> Pcl2Lexer::_symbolicNames = {
  "", "", "", "", "", "", u8"EQUALITY", u8"MUL_DIV_OP", u8"ADD_SUB_OP", 
  u8"MUL_OP", u8"DIV_OP", u8"ADD_OP", u8"SUB_OP", u8"INT", u8"CHAR", u8"IF", 
  u8"WHILE", u8"PRINT", u8"INSERTION", u8"STRING", u8"ID", u8"COMMENT", 
  u8"WS", u8"NEWLINE", u8"LINE_ESCAPE", u8"IGNORE_NEWLINE", u8"LPAREN", 
  u8"RPAREN", u8"LBRACK", u8"RBRACK"
};

dfa::Vocabulary Pcl2Lexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> Pcl2Lexer::_tokenNames;

Pcl2Lexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
    0x2, 0x1f, 0xbb, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
    0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 0x4, 
    0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 0xe, 0x9, 
    0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 0x9, 0x11, 
    0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 0x9, 0x14, 0x4, 
    0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 0x9, 0x17, 0x4, 0x18, 
    0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 
    0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 
    0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 
    0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 
    0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 
    0x5, 0x8, 0x53, 0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x57, 0xa, 0x9, 
    0x3, 0xa, 0x3, 0xa, 0x3, 0xb, 0x3, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xd, 
    0x3, 0xd, 0x3, 0xe, 0x6, 0xe, 0x62, 0xa, 0xe, 0xd, 0xe, 0xe, 0xe, 0x63, 
    0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 
    0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 
    0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x13, 
    0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 0x7f, 
    0xa, 0x14, 0xc, 0x14, 0xe, 0x14, 0x82, 0xb, 0x14, 0x3, 0x14, 0x3, 0x14, 
    0x3, 0x15, 0x3, 0x15, 0x7, 0x15, 0x88, 0xa, 0x15, 0xc, 0x15, 0xe, 0x15, 
    0x8b, 0xb, 0x15, 0x3, 0x16, 0x3, 0x16, 0x7, 0x16, 0x8f, 0xa, 0x16, 0xc, 
    0x16, 0xe, 0x16, 0x92, 0xb, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x3, 
    0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x18, 0x5, 0x18, 0x9b, 0xa, 0x18, 0x3, 
    0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0xa2, 0xa, 
    0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x1a, 0x5, 0x1a, 
    0xa9, 0xa, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 
    0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 
    0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x2, 0x2, 
    0x1f, 0x3, 0x3, 0x5, 0x4, 0x7, 0x5, 0x9, 0x6, 0xb, 0x7, 0xd, 0x8, 0xf, 
    0x9, 0x11, 0xa, 0x13, 0xb, 0x15, 0xc, 0x17, 0xd, 0x19, 0xe, 0x1b, 0xf, 
    0x1d, 0x10, 0x1f, 0x11, 0x21, 0x12, 0x23, 0x13, 0x25, 0x14, 0x27, 0x15, 
    0x29, 0x16, 0x2b, 0x17, 0x2d, 0x18, 0x2f, 0x19, 0x31, 0x1a, 0x33, 0x1b, 
    0x35, 0x1c, 0x37, 0x1d, 0x39, 0x1e, 0x3b, 0x1f, 0x3, 0x2, 0x7, 0x3, 
    0x2, 0x32, 0x3b, 0x5, 0x2, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 0x6, 
    0x2, 0x32, 0x3b, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 0x4, 0x2, 0xc, 
    0xc, 0xf, 0xf, 0x4, 0x2, 0xb, 0xb, 0x22, 0x22, 0x3, 0xa8, 0x2, 0x22, 
    0x2, 0x25, 0x2, 0x27, 0x2, 0x2c, 0x2, 0x2e, 0x2, 0x3d, 0x2, 0x41, 0x2, 
    0x5f, 0x2, 0x61, 0x2, 0x61, 0x2, 0x63, 0x2, 0x7d, 0x2, 0x7f, 0x2, 0x7f, 
    0x2, 0xa3, 0x2, 0xa3, 0x2, 0xa9, 0x2, 0xa9, 0x2, 0xad, 0x2, 0xad, 0x2, 
    0xb8, 0x2, 0xb9, 0x2, 0xbd, 0x2, 0xbd, 0x2, 0xc1, 0x2, 0xc1, 0x2, 0x380, 
    0x2, 0x380, 0x2, 0x389, 0x2, 0x389, 0x2, 0x55c, 0x2, 0x561, 0x2, 0x58b, 
    0x2, 0x58c, 0x2, 0x5c0, 0x2, 0x5c0, 0x2, 0x5c2, 0x2, 0x5c2, 0x2, 0x5c5, 
    0x2, 0x5c5, 0x2, 0x5c8, 0x2, 0x5c8, 0x2, 0x5f5, 0x2, 0x5f6, 0x2, 0x60b, 
    0x2, 0x60c, 0x2, 0x60e, 0x2, 0x60f, 0x2, 0x61d, 0x2, 0x61d, 0x2, 0x620, 
    0x2, 0x621, 0x2, 0x66c, 0x2, 0x66f, 0x2, 0x6d6, 0x2, 0x6d6, 0x2, 0x702, 
    0x2, 0x70f, 0x2, 0x7f9, 0x2, 0x7fb, 0x2, 0x832, 0x2, 0x840, 0x2, 0x860, 
    0x2, 0x860, 0x2, 0x966, 0x2, 0x967, 0x2, 0x972, 0x2, 0x972, 0x2, 0xaf2, 
    0x2, 0xaf2, 0x2, 0xdf6, 0x2, 0xdf6, 0x2, 0xe51, 0x2, 0xe51, 0x2, 0xe5c, 
    0x2, 0xe5d, 0x2, 0xf06, 0x2, 0xf14, 0x2, 0xf16, 0x2, 0xf16, 0x2, 0xf3c, 
    0x2, 0xf3f, 0x2, 0xf87, 0x2, 0xf87, 0x2, 0xfd2, 0x2, 0xfd6, 0x2, 0xfdb, 
    0x2, 0xfdc, 0x2, 0x104c, 0x2, 0x1051, 0x2, 0x10fd, 0x2, 0x10fd, 0x2, 
    0x1362, 0x2, 0x136a, 0x2, 0x1402, 0x2, 0x1402, 0x2, 0x166f, 0x2, 0x1670, 
    0x2, 0x169d, 0x2, 0x169e, 0x2, 0x16ed, 0x2, 0x16ef, 0x2, 0x1737, 0x2, 
    0x1738, 0x2, 0x17d6, 0x2, 0x17d8, 0x2, 0x17da, 0x2, 0x17dc, 0x2, 0x1802, 
    0x2, 0x180c, 0x2, 0x1946, 0x2, 0x1947, 0x2, 0x1a20, 0x2, 0x1a21, 0x2, 
    0x1aa2, 0x2, 0x1aa8, 0x2, 0x1aaa, 0x2, 0x1aaf, 0x2, 0x1b5c, 0x2, 0x1b62, 
    0x2, 0x1bfe, 0x2, 0x1c01, 0x2, 0x1c3d, 0x2, 0x1c41, 0x2, 0x1c80, 0x2, 
    0x1c81, 0x2, 0x1cc2, 0x2, 0x1cc9, 0x2, 0x1cd5, 0x2, 0x1cd5, 0x2, 0x2012, 
    0x2, 0x2029, 0x2, 0x2032, 0x2, 0x2045, 0x2, 0x2047, 0x2, 0x2053, 0x2, 
    0x2055, 0x2, 0x2060, 0x2, 0x207f, 0x2, 0x2080, 0x2, 0x208f, 0x2, 0x2090, 
    0x2, 0x230a, 0x2, 0x230d, 0x2, 0x232b, 0x2, 0x232c, 0x2, 0x276a, 0x2, 
    0x2777, 0x2, 0x27c7, 0x2, 0x27c8, 0x2, 0x27e8, 0x2, 0x27f1, 0x2, 0x2985, 
    0x2, 0x299a, 0x2, 0x29da, 0x2, 0x29dd, 0x2, 0x29fe, 0x2, 0x29ff, 0x2, 
    0x2cfb, 0x2, 0x2cfe, 0x2, 0x2d00, 0x2, 0x2d01, 0x2, 0x2d72, 0x2, 0x2d72, 
    0x2, 0x2e02, 0x2, 0x2e30, 0x2, 0x2e32, 0x2, 0x2e46, 0x2, 0x3003, 0x2, 
    0x3005, 0x2, 0x300a, 0x2, 0x3013, 0x2, 0x3016, 0x2, 0x3021, 0x2, 0x3032, 
    0x2, 0x3032, 0x2, 0x303f, 0x2, 0x303f, 0x2, 0x30a2, 0x2, 0x30a2, 0x2, 
    0x30fd, 0x2, 0x30fd, 0x2, 0xa500, 0x2, 0xa501, 0x2, 0xa60f, 0x2, 0xa611, 
    0x2, 0xa675, 0x2, 0xa675, 0x2, 0xa680, 0x2, 0xa680, 0x2, 0xa6f4, 0x2, 
    0xa6f9, 0x2, 0xa876, 0x2, 0xa879, 0x2, 0xa8d0, 0x2, 0xa8d1, 0x2, 0xa8fa, 
    0x2, 0xa8fc, 0x2, 0xa8fe, 0x2, 0xa8fe, 0x2, 0xa930, 0x2, 0xa931, 0x2, 
    0xa961, 0x2, 0xa961, 0x2, 0xa9c3, 0x2, 0xa9cf, 0x2, 0xa9e0, 0x2, 0xa9e1, 
    0x2, 0xaa5e, 0x2, 0xaa61, 0x2, 0xaae0, 0x2, 0xaae1, 0x2, 0xaaf2, 0x2, 
    0xaaf3, 0x2, 0xabed, 0x2, 0xabed, 0x2, 0xfd40, 0x2, 0xfd41, 0x2, 0xfe12, 
    0x2, 0xfe1b, 0x2, 0xfe32, 0x2, 0xfe54, 0x2, 0xfe56, 0x2, 0xfe63, 0x2, 
    0xfe65, 0x2, 0xfe65, 0x2, 0xfe6a, 0x2, 0xfe6a, 0x2, 0xfe6c, 0x2, 0xfe6d, 
    0x2, 0xff03, 0x2, 0xff05, 0x2, 0xff07, 0x2, 0xff0c, 0x2, 0xff0e, 0x2, 
    0xff11, 0x2, 0xff1c, 0x2, 0xff1d, 0x2, 0xff21, 0x2, 0xff22, 0x2, 0xff3d, 
    0x2, 0xff3f, 0x2, 0xff41, 0x2, 0xff41, 0x2, 0xff5d, 0x2, 0xff5d, 0x2, 
    0xff5f, 0x2, 0xff5f, 0x2, 0xff61, 0x2, 0xff67, 0x2, 0x102, 0x3, 0x104, 
    0x3, 0x3a1, 0x3, 0x3a1, 0x3, 0x3d2, 0x3, 0x3d2, 0x3, 0x571, 0x3, 0x571, 
    0x3, 0x859, 0x3, 0x859, 0x3, 0x921, 0x3, 0x921, 0x3, 0x941, 0x3, 0x941, 
    0x3, 0xa52, 0x3, 0xa5a, 0x3, 0xa81, 0x3, 0xa81, 0x3, 0xaf2, 0x3, 0xaf8, 
    0x3, 0xb3b, 0x3, 0xb41, 0x3, 0xb9b, 0x3, 0xb9e, 0x3, 0x1049, 0x3, 0x104f, 
    0x3, 0x10bd, 0x3, 0x10be, 0x3, 0x10c0, 0x3, 0x10c3, 0x3, 0x1142, 0x3, 
    0x1145, 0x3, 0x1176, 0x3, 0x1177, 0x3, 0x11c7, 0x3, 0x11cb, 0x3, 0x11cf, 
    0x3, 0x11cf, 0x3, 0x11dd, 0x3, 0x11dd, 0x3, 0x11df, 0x3, 0x11e1, 0x3, 
    0x123a, 0x3, 0x123f, 0x3, 0x12ab, 0x3, 0x12ab, 0x3, 0x144d, 0x3, 0x1451, 
    0x3, 0x145d, 0x3, 0x145d, 0x3, 0x145f, 0x3, 0x145f, 0x3, 0x14c8, 0x3, 
    0x14c8, 0x3, 0x15c3, 0x3, 0x15d9, 0x3, 0x1643, 0x3, 0x1645, 0x3, 0x1662, 
    0x3, 0x166e, 0x3, 0x173e, 0x3, 0x1740, 0x3, 0x1c43, 0x3, 0x1c47, 0x3, 
    0x1c72, 0x3, 0x1c73, 0x3, 0x2472, 0x3, 0x2476, 0x3, 0x6a70, 0x3, 0x6a71, 
    0x3, 0x6af7, 0x3, 0x6af7, 0x3, 0x6b39, 0x3, 0x6b3d, 0x3, 0x6b46, 0x3, 
    0x6b46, 0x3, 0xbca1, 0x3, 0xbca1, 0x3, 0xda89, 0x3, 0xda8d, 0x3, 0xe960, 
    0x3, 0xe961, 0x3, 0xc3, 0x2, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 
    0x2, 0x2, 0x2, 0x2, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 
    0x2, 0x2, 0xb, 0x3, 0x2, 0x2, 0x2, 0x2, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 
    0xf, 0x3, 0x2, 0x2, 0x2, 0x2, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2, 0x13, 0x3, 
    0x2, 0x2, 0x2, 0x2, 0x15, 0x3, 0x2, 0x2, 0x2, 0x2, 0x17, 0x3, 0x2, 0x2, 
    0x2, 0x2, 0x19, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x2, 
    0x1d, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x2, 0x21, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x23, 0x3, 0x2, 0x2, 0x2, 0x2, 0x25, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0x27, 0x3, 0x2, 0x2, 0x2, 0x2, 0x29, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2f, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0x31, 0x3, 0x2, 0x2, 0x2, 0x2, 0x33, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0x35, 0x3, 0x2, 0x2, 0x2, 0x2, 0x37, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x39, 0x3, 0x2, 0x2, 0x2, 0x2, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x3, 0x3d, 
    0x3, 0x2, 0x2, 0x2, 0x5, 0x44, 0x3, 0x2, 0x2, 0x2, 0x7, 0x46, 0x3, 0x2, 
    0x2, 0x2, 0x9, 0x48, 0x3, 0x2, 0x2, 0x2, 0xb, 0x4a, 0x3, 0x2, 0x2, 0x2, 
    0xd, 0x4c, 0x3, 0x2, 0x2, 0x2, 0xf, 0x52, 0x3, 0x2, 0x2, 0x2, 0x11, 
    0x56, 0x3, 0x2, 0x2, 0x2, 0x13, 0x58, 0x3, 0x2, 0x2, 0x2, 0x15, 0x5a, 
    0x3, 0x2, 0x2, 0x2, 0x17, 0x5c, 0x3, 0x2, 0x2, 0x2, 0x19, 0x5e, 0x3, 
    0x2, 0x2, 0x2, 0x1b, 0x61, 0x3, 0x2, 0x2, 0x2, 0x1d, 0x65, 0x3, 0x2, 
    0x2, 0x2, 0x1f, 0x69, 0x3, 0x2, 0x2, 0x2, 0x21, 0x6c, 0x3, 0x2, 0x2, 
    0x2, 0x23, 0x72, 0x3, 0x2, 0x2, 0x2, 0x25, 0x78, 0x3, 0x2, 0x2, 0x2, 
    0x27, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x29, 0x85, 0x3, 0x2, 0x2, 0x2, 0x2b, 
    0x8c, 0x3, 0x2, 0x2, 0x2, 0x2d, 0x95, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x9a, 
    0x3, 0x2, 0x2, 0x2, 0x31, 0x9f, 0x3, 0x2, 0x2, 0x2, 0x33, 0xa8, 0x3, 
    0x2, 0x2, 0x2, 0x35, 0xaf, 0x3, 0x2, 0x2, 0x2, 0x37, 0xb2, 0x3, 0x2, 
    0x2, 0x2, 0x39, 0xb5, 0x3, 0x2, 0x2, 0x2, 0x3b, 0xb8, 0x3, 0x2, 0x2, 
    0x2, 0x3d, 0x3e, 0x7, 0x74, 0x2, 0x2, 0x3e, 0x3f, 0x7, 0x67, 0x2, 0x2, 
    0x3f, 0x40, 0x7, 0x76, 0x2, 0x2, 0x40, 0x41, 0x7, 0x77, 0x2, 0x2, 0x41, 
    0x42, 0x7, 0x74, 0x2, 0x2, 0x42, 0x43, 0x7, 0x70, 0x2, 0x2, 0x43, 0x4, 
    0x3, 0x2, 0x2, 0x2, 0x44, 0x45, 0x7, 0x3c, 0x2, 0x2, 0x45, 0x6, 0x3, 
    0x2, 0x2, 0x2, 0x46, 0x47, 0x7, 0x7d, 0x2, 0x2, 0x47, 0x8, 0x3, 0x2, 
    0x2, 0x2, 0x48, 0x49, 0x7, 0x7f, 0x2, 0x2, 0x49, 0xa, 0x3, 0x2, 0x2, 
    0x2, 0x4a, 0x4b, 0x7, 0x3f, 0x2, 0x2, 0x4b, 0xc, 0x3, 0x2, 0x2, 0x2, 
    0x4c, 0x4d, 0x7, 0x3f, 0x2, 0x2, 0x4d, 0x4e, 0x7, 0x3f, 0x2, 0x2, 0x4e, 
    0x4f, 0x7, 0x3f, 0x2, 0x2, 0x4f, 0xe, 0x3, 0x2, 0x2, 0x2, 0x50, 0x53, 
    0x5, 0x13, 0xa, 0x2, 0x51, 0x53, 0x5, 0x15, 0xb, 0x2, 0x52, 0x50, 0x3, 
    0x2, 0x2, 0x2, 0x52, 0x51, 0x3, 0x2, 0x2, 0x2, 0x53, 0x10, 0x3, 0x2, 
    0x2, 0x2, 0x54, 0x57, 0x5, 0x17, 0xc, 0x2, 0x55, 0x57, 0x5, 0x19, 0xd, 
    0x2, 0x56, 0x54, 0x3, 0x2, 0x2, 0x2, 0x56, 0x55, 0x3, 0x2, 0x2, 0x2, 
    0x57, 0x12, 0x3, 0x2, 0x2, 0x2, 0x58, 0x59, 0x7, 0x2c, 0x2, 0x2, 0x59, 
    0x14, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x5b, 0x7, 0x31, 0x2, 0x2, 0x5b, 0x16, 
    0x3, 0x2, 0x2, 0x2, 0x5c, 0x5d, 0x7, 0x2d, 0x2, 0x2, 0x5d, 0x18, 0x3, 
    0x2, 0x2, 0x2, 0x5e, 0x5f, 0x7, 0x2f, 0x2, 0x2, 0x5f, 0x1a, 0x3, 0x2, 
    0x2, 0x2, 0x60, 0x62, 0x9, 0x2, 0x2, 0x2, 0x61, 0x60, 0x3, 0x2, 0x2, 
    0x2, 0x62, 0x63, 0x3, 0x2, 0x2, 0x2, 0x63, 0x61, 0x3, 0x2, 0x2, 0x2, 
    0x63, 0x64, 0x3, 0x2, 0x2, 0x2, 0x64, 0x1c, 0x3, 0x2, 0x2, 0x2, 0x65, 
    0x66, 0x7, 0x29, 0x2, 0x2, 0x66, 0x67, 0x9, 0x7, 0x2, 0x2, 0x67, 0x68, 
    0x7, 0x29, 0x2, 0x2, 0x68, 0x1e, 0x3, 0x2, 0x2, 0x2, 0x69, 0x6a, 0x7, 
    0x6b, 0x2, 0x2, 0x6a, 0x6b, 0x7, 0x68, 0x2, 0x2, 0x6b, 0x20, 0x3, 0x2, 
    0x2, 0x2, 0x6c, 0x6d, 0x7, 0x79, 0x2, 0x2, 0x6d, 0x6e, 0x7, 0x6a, 0x2, 
    0x2, 0x6e, 0x6f, 0x7, 0x6b, 0x2, 0x2, 0x6f, 0x70, 0x7, 0x6e, 0x2, 0x2, 
    0x70, 0x71, 0x7, 0x67, 0x2, 0x2, 0x71, 0x22, 0x3, 0x2, 0x2, 0x2, 0x72, 
    0x73, 0x7, 0x72, 0x2, 0x2, 0x73, 0x74, 0x7, 0x74, 0x2, 0x2, 0x74, 0x75, 
    0x7, 0x6b, 0x2, 0x2, 0x75, 0x76, 0x7, 0x70, 0x2, 0x2, 0x76, 0x77, 0x7, 
    0x76, 0x2, 0x2, 0x77, 0x24, 0x3, 0x2, 0x2, 0x2, 0x78, 0x79, 0x7, 0x3e, 
    0x2, 0x2, 0x79, 0x7a, 0x7, 0x3e, 0x2, 0x2, 0x7a, 0x26, 0x3, 0x2, 0x2, 
    0x2, 0x7b, 0x7c, 0x7, 0x24, 0x2, 0x2, 0x7c, 0x80, 0x9, 0x7, 0x2, 0x2, 
    0x7d, 0x7f, 0x9, 0x7, 0x2, 0x2, 0x7e, 0x7d, 0x3, 0x2, 0x2, 0x2, 0x7f, 
    0x82, 0x3, 0x2, 0x2, 0x2, 0x80, 0x7e, 0x3, 0x2, 0x2, 0x2, 0x80, 0x81, 
    0x3, 0x2, 0x2, 0x2, 0x81, 0x83, 0x3, 0x2, 0x2, 0x2, 0x82, 0x80, 0x3, 
    0x2, 0x2, 0x2, 0x83, 0x84, 0x7, 0x24, 0x2, 0x2, 0x84, 0x28, 0x3, 0x2, 
    0x2, 0x2, 0x85, 0x89, 0x9, 0x3, 0x2, 0x2, 0x86, 0x88, 0x9, 0x4, 0x2, 
    0x2, 0x87, 0x86, 0x3, 0x2, 0x2, 0x2, 0x88, 0x8b, 0x3, 0x2, 0x2, 0x2, 
    0x89, 0x87, 0x3, 0x2, 0x2, 0x2, 0x89, 0x8a, 0x3, 0x2, 0x2, 0x2, 0x8a, 
    0x2a, 0x3, 0x2, 0x2, 0x2, 0x8b, 0x89, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x90, 
    0x7, 0x25, 0x2, 0x2, 0x8d, 0x8f, 0xa, 0x5, 0x2, 0x2, 0x8e, 0x8d, 0x3, 
    0x2, 0x2, 0x2, 0x8f, 0x92, 0x3, 0x2, 0x2, 0x2, 0x90, 0x8e, 0x3, 0x2, 
    0x2, 0x2, 0x90, 0x91, 0x3, 0x2, 0x2, 0x2, 0x91, 0x93, 0x3, 0x2, 0x2, 
    0x2, 0x92, 0x90, 0x3, 0x2, 0x2, 0x2, 0x93, 0x94, 0x8, 0x16, 0x2, 0x2, 
    0x94, 0x2c, 0x3, 0x2, 0x2, 0x2, 0x95, 0x96, 0x9, 0x6, 0x2, 0x2, 0x96, 
    0x97, 0x3, 0x2, 0x2, 0x2, 0x97, 0x98, 0x8, 0x17, 0x2, 0x2, 0x98, 0x2e, 
    0x3, 0x2, 0x2, 0x2, 0x99, 0x9b, 0x7, 0xf, 0x2, 0x2, 0x9a, 0x99, 0x3, 
    0x2, 0x2, 0x2, 0x9a, 0x9b, 0x3, 0x2, 0x2, 0x2, 0x9b, 0x9c, 0x3, 0x2, 
    0x2, 0x2, 0x9c, 0x9d, 0x7, 0xc, 0x2, 0x2, 0x9d, 0x9e, 0x6, 0x18, 0x2, 
    0x2, 0x9e, 0x30, 0x3, 0x2, 0x2, 0x2, 0x9f, 0xa1, 0x7, 0x5e, 0x2, 0x2, 
    0xa0, 0xa2, 0x7, 0xf, 0x2, 0x2, 0xa1, 0xa0, 0x3, 0x2, 0x2, 0x2, 0xa1, 
    0xa2, 0x3, 0x2, 0x2, 0x2, 0xa2, 0xa3, 0x3, 0x2, 0x2, 0x2, 0xa3, 0xa4, 
    0x7, 0xc, 0x2, 0x2, 0xa4, 0xa5, 0x3, 0x2, 0x2, 0x2, 0xa5, 0xa6, 0x8, 
    0x19, 0x2, 0x2, 0xa6, 0x32, 0x3, 0x2, 0x2, 0x2, 0xa7, 0xa9, 0x7, 0xf, 
    0x2, 0x2, 0xa8, 0xa7, 0x3, 0x2, 0x2, 0x2, 0xa8, 0xa9, 0x3, 0x2, 0x2, 
    0x2, 0xa9, 0xaa, 0x3, 0x2, 0x2, 0x2, 0xaa, 0xab, 0x7, 0xc, 0x2, 0x2, 
    0xab, 0xac, 0x6, 0x1a, 0x3, 0x2, 0xac, 0xad, 0x3, 0x2, 0x2, 0x2, 0xad, 
    0xae, 0x8, 0x1a, 0x2, 0x2, 0xae, 0x34, 0x3, 0x2, 0x2, 0x2, 0xaf, 0xb0, 
    0x7, 0x2a, 0x2, 0x2, 0xb0, 0xb1, 0x8, 0x1b, 0x3, 0x2, 0xb1, 0x36, 0x3, 
    0x2, 0x2, 0x2, 0xb2, 0xb3, 0x7, 0x2b, 0x2, 0x2, 0xb3, 0xb4, 0x8, 0x1c, 
    0x4, 0x2, 0xb4, 0x38, 0x3, 0x2, 0x2, 0x2, 0xb5, 0xb6, 0x7, 0x5d, 0x2, 
    0x2, 0xb6, 0xb7, 0x8, 0x1d, 0x5, 0x2, 0xb7, 0x3a, 0x3, 0x2, 0x2, 0x2, 
    0xb8, 0xb9, 0x7, 0x5f, 0x2, 0x2, 0xb9, 0xba, 0x8, 0x1e, 0x6, 0x2, 0xba, 
    0x3c, 0x3, 0x2, 0x2, 0x2, 0xc, 0x2, 0x52, 0x56, 0x63, 0x80, 0x89, 0x90, 
    0x9a, 0xa1, 0xa8, 0x7, 0x8, 0x2, 0x2, 0x3, 0x1b, 0x2, 0x3, 0x1c, 0x3, 
    0x3, 0x1d, 0x4, 0x3, 0x1e, 0x5, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

Pcl2Lexer::Initializer Pcl2Lexer::_init;
